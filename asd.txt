#include <iostream>
#include <vector>
#include <fstream>
using namespace std;

const int INF = 987654321;
//const int MIN = numeric_limits<int>::min();
bool canEverybodyEat(vector<int>& menu);
/* run this program using the console pauser or add your own getch, system("pause") or input loop */

int majority1(int* A, int ArraySize)
{
   int majority = -1, majorityCount = 0;
   for(int i = 0; i < ArraySize; ++i)
   {
      int V = A[i];
      int count = 0;
      for(int j = 0; j < ArraySize; ++j)
      {
         if(A[j]==V)
         {
            ++count;
         }
      }
      
      if(count > majorityCount)
      {
         majorityCount = count;
         majority = V;
      }
   }
   return majority;
}
int majority2(int* A, int ArraySize)
{
   int* count;
   for(int i = 0; i < ArraySize; ++i)
   {
      count[A[i]]++;
   }
   int majority = 0;
   for(int i = 1; i <= 100; ++i)
   {
      if(count[i]>count[majority])
      {
         majority = i;   
      }
   }
   return majority;
}
double movingAverage1(double* A, int M, int ArraySize)
{
   double ret;
   for(int i= M-1; i<ArraySize; ++i)
   {
      double partialSum = 0;
      for(int j=0; j<M ;++j)
      {
         partialSum+=A[i-j];
      }
      ret=(partialSum/M);
   }
   return ret;
}
double movingAverage2(double* A, int M, int ArraySize)
{
   double ret;
   double partialSum = 0;
   for(int i = 0; i<M-1 ;++i)
   {
      partialSum+=A[i];
   }

   for(int i = M-1; i<ArraySize; ++i )
   {
      partialSum+=A[i];
      ret=(partialSum/M);
      partialSum-=A[i-M+1];
   }
   return ret;
   
}
/*
int selectMenu(vector<int>& menu, int food, int kindOfFood)
{
    if(food==kindOfFood)
   {
      if(canEverybodyEat(menu)) {return menu.size();}
      return INF;
   }
   int ret = selectMenu(menu, food+1, kindOfFood);
   menu.push_back(food);
   ret = min(ret, selectMenu(menu, food+1,kindOfFood));
   menu.pop_back();
   return ret;
}
*/
vector<int> factor(int n)
{
   if(n==1)   {return vector<int>(1,1);}
   vector<int> ret;
   
   for(int div =2; n>1; ++div)
   {
      while(n%div==0)
      {
         n/=div;
         ret.push_back(div);   
      }
   }
   return ret;
}
int firstIndex(int* Array, int ArraySize, int element)
{
   for(int i=0;i<ArraySize;++i)
      if(Array[i]==element)   return i;
   return -1;
}
int* selectionSort(int A[], int ArraySize)
{
   for(int i = 0; i<ArraySize;++i)
   {
      int minIndex=i;
      for(int j = i+1;j<ArraySize;++j)
         if(A[minIndex]>A[j])
            minIndex=j;
      swap(A[i],A[minIndex]);
   }
   return A;
} 
int* insertSort(int A[], int ArraySize)
{
   vector<int> Result;
   for(int i=0;i<ArraySize;++i)
   {
      int j=i;
      while(j>0&&A[j-1]>A[j])
      {
         swap(A[j-1],A[j]);
         --j;
      }
   }
   return A;
}

/*int* inefficientMaxSum(int A[],int ArraySize)
{
   int N=ArraySize, ret=MIN;
   for(int i = 0;i<N;++i)
   {
      for(int j=i;j<N;++j)
      {
         int sum=0;
         for(int k=i;k<=j;++k){sum+=A[k];}
         ret =max(ret, sum);
      }
   }
}

*/
int main(int argc, char** argv) 
{
   int selectNum=0;
   cout<<"원하는 코드의 순번을 입력하세요"<<endl;
   cout<<"1. 가장 많이 등장한 숫자 구하기(알고리즘1)"<<endl;
   cout<<"2. 가장 많이 등장한 숫자 구하기(알고리즘2)"<<endl;
   cout<<"3. 이동 평균 구하기"<<endl;
   cout<<"4. 선형시간에 이동 평균 구하기"<<endl;
   cout<<"5. 음식 메뉴 정하기"<<endl;
   cout<<"6. 가장 간단한 형태의 소인수 분해 알고리즘"<<endl;
    cout<<"7. 선형 탐색"<<endl;
    cout<<"8. 선택 정렬과 삽입 정렬"<<endl;
    cout<<"9. 최대 연속 부분 구간 합 문제를 푸는 무식한 알고리즘들"<<endl;
    cout<<"10. 최대 연속 부분 구간 합 문제를 푸는 분할 정복 알고리즘"<<endl;
     cout<<"11. 최대 연속 부분 구간 합 문제를 푸는 동적 계획법 알고리즘"<<endl;
     cout<<"입력 : ";cin>> selectNum;
   switch(selectNum)
   {
      int ArraySize, majority, MovingAverageNum, kindOfFood, NaturalNumber, element, ArrayIndex;
      double retNum;


      case 1:
      {
         cout<<"배열의 크기를 입력하세요: "; cin>>ArraySize;
         int A[ArraySize];   
         for(int i=0;i<ArraySize;i++)
         {
            cout<<i+1<<"번째 원소를 입력하세요(정수만) : "; 
            cin >> A[i]; 

         }
         majority=majority1(A, ArraySize);
         cout <<"배열에서 제일 많이 입력 된 수는 "<<majority<<"입니다."<<endl;

         break;
      }   
      case 2:
      {
         cout<<"배열의 크기를 입력하세요 : "; cin>>ArraySize;
         int A[ArraySize];
         for(int i=0;i<ArraySize;i++)
         {
            cout<<i+1<<"번째 원소를 입력하세요(정수만) : "; 
            cin >> A[i]; 
         }
         majority=majority1(A, ArraySize);
         cout <<"배열에서 제일 많이 입력 된 수는 "<<majority<<"입니다."<<endl;
         break;   
      }
      case 3:
      {
         cout<<"입력하고자 하는 기간의 크기를 입력하세요(개월) : "; cin>> ArraySize;
         cout<<"M값을 입력하세요 : "; cin>> MovingAverageNum;
         double B[ArraySize];
         for(int i=0;i<ArraySize;i++)
         {
            cout<<i+1<<"달째 몸무게를 입력하세요 : ";
            cin >> B[i]; 
         }
         retNum = movingAverage1(B,MovingAverageNum,ArraySize);
         cout<<"이동 평균 값은 "<<retNum<<"입니다."<<endl; 
      
      }      
      case 4:
      {
         cout<<"입력하고자 하는 기간의 크기를 입력하세요(개월) : "; cin>> ArraySize;
         cout<<"M값을 입력하세요 : "; cin>> MovingAverageNum;
         double B[ArraySize];
         for(int i=0;i<ArraySize;i++)
         {
            cout<<i+1<<"달째 몸무게를 입력하세요 : ";
            cin >> B[i]; 
         }
         retNum = movingAverage2(B,MovingAverageNum,ArraySize);
         cout<<"이동 평균 값은 "<<retNum<<"입니다."<<endl; 
      }
      case 5:
      {
         
      }
      case 6:
      {
         vector<int> FactorizationInPrimeFactors;
         cout<<"임의의 자연수를 입력하세요 : "; cin>> NaturalNumber;
         FactorizationInPrimeFactors = factor(NaturalNumber);
         cout<<"입력한 자연수 "<< NaturalNumber<<"에 대한 소인수 분해 결과 : "; 
         for(int i=0; i < FactorizationInPrimeFactors.size(); i++)
         {
            cout<<" "<<FactorizationInPrimeFactors[i];
         }
         
      }
      case 7:
      {
         cout<<"배열의 크기를 입력하세요 : "; cin>>ArraySize;
         int A[ArraySize];   
         for(int i=0;i<ArraySize;i++)
         {
            cout<<i+1<<"번째 원소를 입력하세요(정수만) : "; 
            cin >> A[i]; 
         }
         cout<<"찾고자 하는 원소를 입력하세요 :"; cin>>element;
         ArrayIndex = firstIndex(A, ArraySize, element);
         cout<<"입력한 "<<element<<"는 "<< ArrayIndex+1<<"번째에 위치해 있습니다."<<endl;
      }
      case 8:
      {
         cout<<"배열의 크기를 입력하세요 : "; cin>>ArraySize;
         int A[ArraySize];   
         for(int i=0;i<ArraySize;i++)
         {
            cout<<i+1<<"번째 원소를 입력하세요(정수만) : "; 
            cin >> A[i];
         }   
         int* selectionSortArray = selectionSort(A, ArraySize);
         int* insertSortArray = insertSort(A, ArraySize);
         
         cout<<"선택 정렬 결과 : ";
         for(int i=0;i<ArraySize;i++){cout<<selectionSortArray[i]<<" ";}cout<<endl;
         cout<<"삽입 정렬 결과 : ";
         for(int i=0;i<ArraySize;i++){cout<<insertSortArray[i]<<" ";}cout<<endl;

      }
      

   }
   
   return 0;
}